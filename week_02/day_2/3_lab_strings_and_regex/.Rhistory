miniluv <- ("Miniluv")
miniplenty <- ("Miniplenty")
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep.
# check Dep has been used
str_extract("Mini")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry")
minitrue <- ("Minitrue")
minipax <- ("Minipax")
miniluv <- ("Miniluv")
miniplenty <- ("Miniplenty")
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep.
# check Dep has been used
str_extract_all("Mini")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry")
minitrue <- ("Minitrue")
minipax <- ("Minipax")
miniluv <- ("Miniluv")
miniplenty <- ("Miniplenty")
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep.
# check Dep has been used
str_extract_all("Mini?")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry")
minitrue <- ("Minitrue")
minipax <- ("Minipax")
miniluv <- ("Miniluv")
miniplenty <- ("Miniplenty")
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep.
# check Dep has been used
str_extract_all("Ministry")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry")
minitrue <- ("Minitrue")
minipax <- ("Minipax")
miniluv <- ("Miniluv")
miniplenty <- ("Miniplenty")
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep.
# check Ministry still exists but the old Ministry names have changes
str_extract_all("Ministry")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists but the old Ministry names have changes
str_extract_all("Mini?1stry")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists but the old Ministry names have changes
str_extract_all("Mini")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists but the old Ministry names have changes
str_extract_all("Mini*")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists but the old Ministry names have changes
str_extract_all("Mini^")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists but the old Ministry names have changes
str_extract_all("Mini")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Ministry")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Department")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Section")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace_all(pattern1, "Section") %>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace_all(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Section")
gin_pattern <- (" gin ")
Gin_pattern <- (" Gin ")
GIN_pattern <- (" GIN ")
# checking that no other words such as "beginning"
whole_text  %>%
str_replace(gin_pattern, " vodka ") %>%
str_replace(Gin_pattern, " Vodka ") %>%
str_replace(GIN_pattern, " VODKA ") %>%
# check that no gin is left
str_detect_all(" [gG][iI][nN] ")
gin_pattern <- (" gin ")
Gin_pattern <- (" Gin ")
GIN_pattern <- (" GIN ")
# checking that no other words such as "beginning"
whole_text  %>%
str_replace(gin_pattern, " vodka ") %>%
str_replace(Gin_pattern, " Vodka ") %>%
str_replace(GIN_pattern, " VODKA ") %>%
# check that no gin is left
str_detect(" [gG][iI][nN] ")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace_all(regex("department", ignore_case = TRUE), "Dep") %>% # after this row has run, no occurrences of "Department" will remain in the text.
#str_replace_all(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Section")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace_all(regex("department", ignore_case = TRUE), "Dep") %>% # after this row has run, no occurrences of "Department" will remain in the text.
#str_replace_all(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Dep")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace_all(regex("department", ignore_case = TRUE), "Dep")%>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace_all(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Section")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace_all(regex("department", ignore_case = TRUE), "Sections")%>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace_all(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Section")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace_all(regex("department", ignore_case = TRUE), "Sections")%>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace_all(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Department")
pattern1 <- ("[dD]epartment")
pattern2 <- ("Mini?!stry") # all cases of Mini except Ministry.  E.g. Minitrue will be captured
whole_text %>%
str_replace_all(regex("department", ignore_case = TRUE), "Sections")%>% # after this row has run, no occurrences of "Department" will remain in the text.
str_replace_all(pattern2, "Dep") %>% # after this row has run, we replace "Mini" with "Dep".
# check Ministry still exists
str_extract_all("Section")
edin_weather <- list(
"Thursday" = list(temperature = "18C", chance_rain = "<5%", wind_speed = "7mph"),
"Friday" = list(temperature = "18C", chance_rain = "<5%", wind_speed = "8mph"),
"Saturday" = list(temperature = "19C", chance_rain = "40%", wind_speed = "7mph")
)
# test out the chance of rain on Saturday
edin_weather[["Saturday"]][["chance_rain"]]
i <- edin_weather[["Thursday"]][["chance_rain"]]
ii <- edin_weather[[3]][[3]]
iii <- edin_weather[[1]][[1]]
print(i, ii, iii)
print(c(i,ii,iii))
temps <- c(18,18,19,18,17,18,18,19,20,18,22,23,18,19)
length(temps)
temps <- c(18,18,19,18,17,18,18,19,20,18,22,23,18,19)
length(temps) # to check there are 14 values!
long_range_forecast <- matrix(data = temps, nrow = 2, ncol = 7, byrow = TRUE)
long_range_forecast
i <- long_range_forecast[2,3]
ii <- long_range_forecast[2,]
iii <- long_range_forecast[,c(3,5)]
print(c(i,ii,iii))
edin_weather <- list(
"Thursday" = list(temperature = "18C", chance_rain = "<5%", wind_speed = "7mph"),
"Friday" = list(temperature = "18C", chance_rain = "<5%", wind_speed = "8mph"),
"Saturday" = list(temperature = "19C", chance_rain = "40%", wind_speed = "7mph")
)
i <- edin_weather[["Thursday"]][["chance_rain"]]
ii <- edin_weather[[3]][[3]]
iii <- edin_weather[[1]][[1]]
print(c(i,ii,iii))
temps <- c(18,18,19,18,17,18,18,19,20,18,22,23,18,19)
length(temps) # to check there are 14 values!
long_range_forecast <- matrix(data = temps, nrow = 2, ncol = 7, byrow = TRUE)
long_range_forecast
a <- long_range_forecast[2,3]
b <- long_range_forecast[2,]
c <- long_range_forecast[,c(3,5)]
print(
print(a)
print(b)
a <- long_range_forecast[2,3]
b <- long_range_forecast[2,]
c <- long_range_forecast[,c(3,5)]
print(a)
print(b)
a <- long_range_forecast[2,3]
b <- long_range_forecast[2,]
c <- long_range_forecast[,c(3,5)]
print(a)
print(b)
print(c)
a <- long_range_forecast[2,3]
b <- long_range_forecast[2,]
c <- long_range_forecast[,c(1,3,5)]
print(a)
print(b)
print(c)
func_5 <- function(x){
if (is.character(x) == TRUE) {
print("The answer is: ",x)
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
}
}
} else {
func_5 <- function(x){
if (is.character(x) == TRUE) {
print("The answer is: ",x)
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
}
} else {
func_5 <- function(x){
if (is.character(x) == TRUE) {
print("The answer is: ",x)
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
}
}
}
func_5 <- function(x){
if (is.character(x) == TRUE) {
print("The answer is: ",x)
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
} else {
print("Invalid input")
}
}
}
# testing the function
func_5("apple")
# testing the function
func_5(apple)
# testing the function
is.character(apple)
# testing the function
is.character("apple")
func_5 <- function(x){
if (is.character(x) == TRUE) {
print("The answer is: ")
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
} else {
print("Invalid input")
}
}
}
# testing the function
func_5("apple")
func_5 <- function(x){
if (is.character(x) == TRUE) {
print(c("The answer is: ",x)
} else {
func_5 <- function(x){
if (is.character(x) == TRUE) {
print(c("The answer is: ",x))
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
} else {
print("Invalid input")
}
}
}
# testing the function
func_5("apple")
print(paste("The answer is: ",x))
print(paste("The answer is: ", x))
func_5 <- function(x){
if (is.character(x) == TRUE) {
print(paste("The answer is: ", x))
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
} else {
print("Invalid input")
}
}
}
func_5 <- function(x){
if (is.character(x) == TRUE) {
print(paste("The answer is: ", x, sep = ""))
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
} else {
print("Invalid input")
}
}
}
# testing the function
func_5("apple")
# testing the function
func_5(5)
# testing the function
func_5(9)
# testing the function
func_5(21)
# testing the function
func_5(10)
# testing the function
func_5(11)
# testing the function
func_5(1e6)
# testing the function
func_5(%3)
# testing the function
func_5(TRUE)
func_5("apple")
func_5(5)
func_5(15)
func_5(TRUE)
check_same_vectors <- function(x,y) {
if (is.vector(x)) {
if (is.vector(y)) {
print("both are vectors")
} else {
print(paste(y, " is not a vector", sep = ""))
}
} else {
print(paste(x, " is not a vector", sep = ""))
}
}
# testing the function on some input
a <- c(a, b, c)
is.vector(a)
b <- c(1, 2, 3)
is.vector(b)
check_same_vectors(a,b)
check_same_vectors(a)
check_same_vectors(a, "apple")
# testing the function on some input
a <- c(a, b, c)
b <- c(1, 2, 3)
check_same_vectors(a, "apple")
check_same_vectors(a, TRUE)
is.vector(TRUE)
is.vector(TRUE)
is.vector("apple")
is.vector(list(1,2,3,a))
is.vector(list(1,2,3,a))
test_list <- list(1, "a", TRUE, c(1,2,3))
check_same_vectors(a, TRUE)
is.vector(test_list)
is.vector(test_list)
check_same_vectors(a, test_list)
is.vector(test_list)
class(test_list)
class(a)
class(b)
cat(b)
cat(a)
cat(a)
print(c)
cat(a)
cat(b)
print(c)
cat(b)
print(a)
a <- long_range_forecast[2,3]
b <- long_range_forecast[2,]
c <- long_range_forecast[,c(1,3,5)]
print(a)
print(b)
print(c)
cat(a)
print(a)
cat(b)
print(b)
print(b)
cat(b)
edin_weather <- list(
"Thursday" = list(temperature = "18C", chance_rain = "<5%", wind_speed = "7mph"),
"Friday" = list(temperature = "18C", chance_rain = "<5%", wind_speed = "8mph"),
"Saturday" = list(temperature = "19C", chance_rain = "40%", wind_speed = "7mph")
)
i <- edin_weather[["Thursday"]][["chance_rain"]]
ii <- edin_weather[[3]][[3]]
iii <- edin_weather[[1]][[1]]
print(c(i,ii,iii))
temps <- c(18,18,19,18,17,18,18,19,20,18,22,23,18,19)
length(temps) # to check there are 14 values!
long_range_forecast <- matrix(data = temps, nrow = 2, ncol = 7, byrow = TRUE)
long_range_forecast
a <- long_range_forecast[2,3]
b <- long_range_forecast[2,]
c <- long_range_forecast[,c(1,3,5)]
print(a)
cat(b)
print(c)
func_5 <- function(x){
if (is.character(x) == TRUE) {
print(paste("The answer is: ", x, sep = ""))
} else {
if (is.numeric(x) == TRUE) {
if (x<10) {
return(x)
} else {
return(x/10)
}
} else {
print("Invalid input")
}
}
}
# testing the function
func_5("apple")
func_5(5)
func_5(15)
func_5(TRUE)
check_same_vectors <- function(x,y) {
if (is.vector(x)) {
if (is.vector(y)) {
print("both are vectors")
} else {
print(paste(y, " is not a vector", sep = ""))
}
} else {
print(paste(x, " is not a vector", sep = ""))
}
}
# testing the function on some input
test_vector_1 <- c(a, b, c)
test_vector_2 <- c(1, 2, 3)
test_list <- list(1, "a", TRUE, c(1,2,3))
check_same_vectors(a, test_list)
class(b)
print(b)
a <- long_range_forecast[2,3]
b <- long_range_forecast[2,]
c <- long_range_forecast[,c(1,3,5)]
print(a)
print(b)
print(c)
check_same_vectors(test_vector_1, test_list)
class(test_list)
class(test_vector_1)
